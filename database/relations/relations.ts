// todo: separate relations by models
import { EventsRelations } from '../../src/modules/events/repositories/events.relations';
import { UserRelations } from '../../src/modules/users/models/user.relations';

enum RelationsEnum {
  Brackhit = 'brackhit',
  Owner = 'owner',
  Matchups = 'matchups',
  BrackhitContent = 'brackhitContent',
  BrackhitUser = 'brackhitUser',
  Profile = 'profile',
  Content = 'content',
  Choices = 'choices',
  Album = 'album',
  Artists = 'artists',
  Artist = 'artist',
  Tracks = 'tracks',
  Albums = 'albums',
  UserFeed = 'userFeed',
  AlbumTrack = 'albumTrack',
  TrackArtists = 'trackArtists',
  Type = 'type',
  Genre = 'genre',
  Genres = 'genres',
  Sorting = 'sorting',
  ContentType = 'contentType',
  AppleTrack = 'appleTrack',
  BrackhitGenres = 'brackhitGenres',
  BrackhitTags = 'brackhitTags',
  SpotifyArtist = 'spotifyArtist',
  ArtistGenre = 'artistGenre',
  SpotifyArtists = 'spotifyArtists',
  ArtistTracks = 'artistTracks',
  Likes = 'likes',
  Sort = 'sort',
  FeedSource = 'sourceFeed', // do not change property name to 'feedSource' due to Objection errors
  Track = 'track',
  TrackAlbums = 'trackAlbums',
  Choice = 'choice',
  DailyBrackhit = 'dailyBrackhit',
  Company = 'company',
  Companies = 'companies',
  User = 'user',
  Users = 'users',
  UserInfluencer = 'userInfluencer',
  UserProfile = 'userProfile',
  BrackhitAds = 'brackhitAds',
  SuggestionParent = 'suggestionParent',
  SuggestionChild = 'suggestionChild',
  Brackhits = 'brackhits',
  CampaignChoices = 'campaignChoices',
  CampaignBrackhitUserChoice = 'campaignBrackhitUserChoice',
  NewsFeedItem = 'newsFeedItem',
  Replies = 'replies',
  Comment = 'comment',
  Campaigns = 'campaigns',
  UserRequestedProfile = 'userRequestedProfile',
  BrackhitArtists = 'brackhitArtists',
  ArtistLimitSort = 'artistLimitSort',
  CentralFeed = 'centralFeed',
  NewsFeed = 'newsFeed',
  SpotifyRelatedArtists = 'spotifyRelatedArtists',
  RelatedSpotifyArtist = 'relatedSpotifyArtist',
  Campaign = 'campaign',
  UserAgent = 'userAgent',
  Action = 'action',
  Logs = 'logs',
  Ballot = 'ballot',
  VotingType = 'votingType',
  Categories = 'categories',
  CategoryName = 'categoryName',
  ChoiceContent = 'choiceContent',
  CampaignUserBallot = 'campaignUserBallot',
  CampaignUserBallotChoices = 'campaignUserBallotChoices',
  Channel = 'channel',
  Videos = 'videos',
  Video = 'video',
  Slugs = 'slugs',
  CampaignBrackhits = 'campaignBrackhits',
  CampaignBallots = 'campaignBallots',
  Questions = 'questions',
  Question = 'question',
  Prompt = 'prompt',
  Answers = 'answers',
  Resolution = 'resolution',
  QrCode = 'qrCode',
  Trivia = 'trivia',
  IntegrationSource = 'integrationSource',
  CampaignUser = 'campaignUser',
  Data = 'data',
}

export const Relations = { ...RelationsEnum, ...EventsRelations, ...UserRelations };
export type Relations = typeof Relations;
